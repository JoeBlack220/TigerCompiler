type token =
  | IF of (Analysis.Ab.pos)
  | ID of (string * Analysis.Ab.pos)
  | INT of (int * Analysis.Ab.pos)
  | STRING of (string * Analysis.Ab.pos)
  | PLUS of (Analysis.Ab.pos)
  | EOF
  | TYPE of (Analysis.Ab.pos)
  | VAR of (Analysis.Ab.pos)
  | FUNCTION of (Analysis.Ab.pos)
  | BREAK of (Analysis.Ab.pos)
  | OF of (Analysis.Ab.pos)
  | END of (Analysis.Ab.pos)
  | IN of (Analysis.Ab.pos)
  | NIL of (Analysis.Ab.pos)
  | LET of (Analysis.Ab.pos)
  | DO of (Analysis.Ab.pos)
  | TO of (Analysis.Ab.pos)
  | FOR of (Analysis.Ab.pos)
  | WHILE of (Analysis.Ab.pos)
  | ELSE of (Analysis.Ab.pos)
  | THEN of (Analysis.Ab.pos)
  | ARRAY of (Analysis.Ab.pos)
  | ASSIGN of (Analysis.Ab.pos)
  | OR of (Analysis.Ab.pos)
  | AND of (Analysis.Ab.pos)
  | GE of (Analysis.Ab.pos)
  | GT of (Analysis.Ab.pos)
  | LE of (Analysis.Ab.pos)
  | LT of (Analysis.Ab.pos)
  | NEQ of (Analysis.Ab.pos)
  | EQ of (Analysis.Ab.pos)
  | DIVIDE of (Analysis.Ab.pos)
  | TIMES of (Analysis.Ab.pos)
  | MINUS of (Analysis.Ab.pos)
  | DOT of (Analysis.Ab.pos)
  | RBRACE of (Analysis.Ab.pos)
  | LBRACE of (Analysis.Ab.pos)
  | RBRACK of (Analysis.Ab.pos)
  | LBRACK of (Analysis.Ab.pos)
  | RPAREN of (Analysis.Ab.pos)
  | LPAREN of (Analysis.Ab.pos)
  | SEMICOLON of (Analysis.Ab.pos)
  | COLON of (Analysis.Ab.pos)
  | COMMA of (Analysis.Ab.pos)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* Header - OCaml declarations 

   Unfortunately, OCamlYacc places these declarations only in the
   generated `parser.ml` file and not in the generated `parser.mli`
   file.  Thus, we need fully qualified names in an declaration that
   appears in the `parser.mli` interface file.  
 *)

module S = Analysis.Sy
module A = Analysis.Ab

let rec fix_decs = function
  | [ ] -> [ ]
  | ((A.TypeDec td1)::(A.TypeDec td2)::rest)
      -> fix_decs ((A.TypeDec (td1 @ td2)) :: rest)
  | ((A.FunctionDec fd1)::(A.FunctionDec fd2)::rest)
      -> fix_decs ((A.FunctionDec (fd1 @ fd2)) :: rest)
  | (r::rest) -> r :: fix_decs rest

# 70 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IF *);
  258 (* ID *);
  259 (* INT *);
  260 (* STRING *);
  261 (* PLUS *);
  262 (* TYPE *);
  263 (* VAR *);
  264 (* FUNCTION *);
  265 (* BREAK *);
  266 (* OF *);
  267 (* END *);
  268 (* IN *);
  269 (* NIL *);
  270 (* LET *);
  271 (* DO *);
  272 (* TO *);
  273 (* FOR *);
  274 (* WHILE *);
  275 (* ELSE *);
  276 (* THEN *);
  277 (* ARRAY *);
  278 (* ASSIGN *);
  279 (* OR *);
  280 (* AND *);
  281 (* GE *);
  282 (* GT *);
  283 (* LE *);
  284 (* LT *);
  285 (* NEQ *);
  286 (* EQ *);
  287 (* DIVIDE *);
  288 (* TIMES *);
  289 (* MINUS *);
  290 (* DOT *);
  291 (* RBRACE *);
  292 (* LBRACE *);
  293 (* RBRACK *);
  294 (* LBRACK *);
  295 (* RPAREN *);
  296 (* LPAREN *);
  297 (* SEMICOLON *);
  298 (* COLON *);
  299 (* COMMA *);
    0|]

let yylhs = "\255\255\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\011\000\011\000\012\000\012\000\010\000\013\000\013\000\
\008\000\008\000\007\000\007\000\009\000\003\000\004\000\004\000\
\004\000\006\000\006\000\005\000\005\000\005\000\005\000\005\000\
\014\000\014\000\014\000\017\000\017\000\016\000\016\000\015\000\
\000\000"

let yylen = "\002\000\
\002\000\004\000\004\000\006\000\008\000\005\000\005\000\004\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\004\000\
\001\000\001\000\001\000\003\000\002\000\003\000\006\000\004\000\
\001\000\000\000\001\000\001\000\003\000\003\000\001\000\003\000\
\000\000\001\000\001\000\003\000\003\000\002\000\000\000\003\000\
\004\000\000\000\002\000\004\000\006\000\007\000\009\000\004\000\
\001\000\003\000\003\000\000\000\001\000\001\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\026\000\027\000\009\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\029\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\000\000\000\000\000\000\000\000\000\000\
\035\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
\030\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\021\000\000\000\000\000\
\000\000\000\000\048\000\000\000\032\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\044\000\
\000\000\049\000\037\000\057\000\000\000\000\000\056\000\000\000\
\000\000\000\000\000\000\061\000\000\000\006\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\059\000\058\000\000\000\064\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\055\000\015\000\016\000\106\000\026\000\027\000\051\000\052\000\
\053\000\033\000\056\000\057\000\100\000\111\000\115\000\116\000\
\117\000"

let yysindex = "\013\000\
\151\255\000\000\151\255\067\255\000\000\000\000\000\000\000\000\
\005\255\018\255\151\255\151\255\081\255\144\002\000\000\001\255\
\064\002\030\255\035\255\151\255\151\255\000\000\052\255\068\255\
\073\255\005\255\074\255\058\255\173\002\000\000\000\000\172\255\
\049\255\151\255\000\000\151\255\151\255\151\255\151\255\151\255\
\151\255\151\255\151\255\151\255\151\255\151\255\151\255\151\255\
\244\254\070\255\000\000\069\255\059\255\244\001\033\255\076\255\
\000\000\078\255\238\254\079\255\000\000\133\255\151\255\151\255\
\000\000\151\255\000\000\004\255\030\003\168\001\253\254\253\254\
\253\254\253\254\253\254\253\254\000\000\000\000\004\255\001\003\
\188\002\151\255\000\000\151\255\000\000\035\255\249\254\151\255\
\000\000\254\254\151\255\107\255\114\255\000\000\210\255\118\255\
\217\002\001\003\206\001\000\000\151\255\026\002\001\003\000\000\
\151\255\000\000\000\000\000\000\117\255\114\255\000\000\001\003\
\108\255\089\255\090\255\000\000\099\255\000\000\000\000\151\255\
\151\255\001\003\244\254\001\003\137\255\106\255\151\255\138\255\
\114\255\235\254\246\002\000\000\000\000\000\000\001\003\000\000\
\000\000\151\255\146\255\151\255\001\003\127\255\001\003\151\255\
\001\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\147\255\000\000\000\000\000\000\000\000\000\000\000\000\040\000\
\000\000\000\000\123\255\000\000\122\255\000\000\000\000\000\000\
\000\000\147\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\128\255\000\000\131\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\169\001\156\000\194\000\232\000\
\014\001\053\001\092\001\131\001\000\000\000\000\118\000\207\001\
\121\002\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\132\255\000\000\000\000\000\000\
\000\000\245\001\250\254\000\000\000\000\000\000\228\254\000\000\
\000\000\000\000\000\000\000\000\000\000\139\255\000\000\066\255\
\000\000\000\000\042\255\000\000\000\000\000\000\000\000\000\000\
\000\000\027\002\001\000\066\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\255\000\000\
\000\000\000\000\000\000\000\000\105\255\000\000\105\002\000\000\
\116\255"

let yygindex = "\000\000\
\005\000\000\000\000\000\006\000\000\000\136\000\081\000\000\000\
\000\000\110\000\000\000\087\000\055\000\000\000\000\000\049\000\
\069\000"

let yytablesize = 1087
let yytable = "\108\000\
\047\000\034\000\105\000\091\000\039\000\014\000\045\000\017\000\
\138\000\022\000\023\000\024\000\025\000\001\000\045\000\029\000\
\030\000\032\000\109\000\028\000\139\000\018\000\047\000\092\000\
\054\000\082\000\018\000\044\000\045\000\046\000\082\000\049\000\
\039\000\110\000\044\000\045\000\050\000\034\000\068\000\025\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\058\000\083\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\095\000\097\000\098\000\059\000\099\000\052\000\
\052\000\052\000\060\000\088\000\062\000\052\000\019\000\063\000\
\062\000\003\000\004\000\005\000\006\000\062\000\102\000\067\000\
\103\000\007\000\053\000\053\000\053\000\008\000\009\000\112\000\
\053\000\010\000\011\000\084\000\018\000\086\000\019\000\085\000\
\020\000\122\000\021\000\090\000\113\000\124\000\054\000\054\000\
\054\000\012\000\089\000\114\000\054\000\020\000\093\000\031\000\
\013\000\055\000\055\000\055\000\131\000\099\000\125\000\055\000\
\119\000\127\000\128\000\135\000\129\000\003\000\004\000\005\000\
\006\000\130\000\133\000\136\000\134\000\007\000\141\000\094\000\
\143\000\008\000\009\000\142\000\145\000\010\000\011\000\003\000\
\004\000\005\000\006\000\011\000\144\000\041\000\050\000\007\000\
\034\000\061\000\043\000\008\000\009\000\012\000\104\000\010\000\
\011\000\036\000\060\000\096\000\013\000\060\000\107\000\132\000\
\034\000\137\000\126\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\018\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\066\000\000\000\034\000\000\000\
\000\000\000\000\000\000\000\000\118\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
\047\000\000\000\000\000\047\000\047\000\016\000\000\000\047\000\
\047\000\000\000\000\000\047\000\047\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\047\000\000\000\047\000\000\000\047\000\
\000\000\047\000\000\000\047\000\025\000\025\000\025\000\025\000\
\000\000\000\000\025\000\025\000\015\000\000\000\025\000\025\000\
\000\000\000\000\025\000\025\000\000\000\000\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\000\000\025\000\000\000\025\000\000\000\025\000\000\000\
\025\000\000\000\025\000\019\000\019\000\019\000\019\000\000\000\
\000\000\019\000\019\000\014\000\000\000\019\000\019\000\000\000\
\000\000\019\000\019\000\000\000\000\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\000\000\000\000\019\000\
\000\000\019\000\000\000\019\000\000\000\019\000\000\000\019\000\
\000\000\019\000\020\000\020\000\020\000\020\000\000\000\000\000\
\020\000\020\000\013\000\000\000\020\000\020\000\000\000\000\000\
\020\000\020\000\000\000\000\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\000\000\000\000\020\000\000\000\
\020\000\000\000\020\000\000\000\020\000\000\000\020\000\000\000\
\020\000\011\000\011\000\011\000\000\000\000\000\011\000\011\000\
\012\000\000\000\011\000\011\000\000\000\000\000\011\000\011\000\
\000\000\000\000\011\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\011\000\000\000\011\000\000\000\011\000\000\000\011\000\018\000\
\018\000\018\000\000\000\000\000\018\000\018\000\010\000\000\000\
\018\000\018\000\000\000\000\000\018\000\018\000\000\000\000\000\
\018\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\018\000\000\000\
\018\000\000\000\018\000\000\000\018\000\017\000\017\000\017\000\
\000\000\000\000\017\000\017\000\002\000\000\000\017\000\017\000\
\000\000\000\000\017\000\017\000\000\000\000\000\017\000\017\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\017\000\000\000\017\000\000\000\
\017\000\000\000\017\000\016\000\016\000\016\000\000\000\000\000\
\016\000\016\000\004\000\000\000\016\000\016\000\000\000\000\000\
\016\000\016\000\000\000\000\000\016\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\016\000\000\000\016\000\000\000\016\000\000\000\
\016\000\000\000\015\000\015\000\015\000\000\000\000\000\015\000\
\015\000\031\000\000\000\015\000\015\000\000\000\000\000\015\000\
\015\000\000\000\000\000\015\000\015\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\015\000\000\000\015\000\000\000\015\000\000\000\015\000\
\000\000\014\000\014\000\014\000\000\000\000\000\014\000\014\000\
\005\000\000\000\014\000\014\000\000\000\000\000\014\000\014\000\
\000\000\000\000\014\000\014\000\000\000\000\000\000\000\000\000\
\003\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\014\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\
\013\000\013\000\013\000\000\000\000\000\013\000\013\000\035\000\
\000\000\013\000\013\000\000\000\000\000\013\000\013\000\000\000\
\000\000\013\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\000\000\000\013\000\
\000\000\013\000\000\000\013\000\034\000\013\000\012\000\012\000\
\012\000\000\000\000\000\012\000\012\000\000\000\000\000\012\000\
\012\000\000\000\000\000\012\000\012\000\000\000\000\000\012\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\000\000\000\000\012\000\000\000\012\000\000\000\012\000\
\000\000\012\000\034\000\012\000\010\000\010\000\010\000\000\000\
\000\000\010\000\010\000\000\000\000\000\010\000\010\000\000\000\
\000\000\010\000\010\000\000\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\000\000\
\000\000\010\000\000\000\010\000\000\000\010\000\121\000\010\000\
\034\000\010\000\002\000\002\000\002\000\000\000\000\000\002\000\
\002\000\000\000\000\000\002\000\002\000\000\000\000\000\002\000\
\002\000\000\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\000\000\000\000\002\000\
\087\000\002\000\000\000\002\000\000\000\002\000\034\000\002\000\
\004\000\004\000\004\000\000\000\000\000\004\000\004\000\000\000\
\000\000\004\000\004\000\000\000\000\000\004\000\004\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\000\000\004\000\123\000\004\000\
\000\000\004\000\000\000\004\000\034\000\004\000\000\000\031\000\
\031\000\031\000\000\000\000\000\031\000\031\000\000\000\000\000\
\031\000\031\000\000\000\048\000\031\000\031\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\000\000\000\000\000\000\031\000\000\000\031\000\000\000\
\031\000\000\000\031\000\000\000\031\000\000\000\005\000\005\000\
\005\000\000\000\000\000\005\000\005\000\000\000\000\000\005\000\
\005\000\000\000\000\000\005\000\005\000\000\000\003\000\003\000\
\003\000\000\000\000\000\003\000\003\000\000\000\000\000\003\000\
\003\000\000\000\000\000\005\000\003\000\005\000\000\000\005\000\
\000\000\005\000\000\000\005\000\034\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\000\000\003\000\000\000\003\000\
\000\000\003\000\000\000\003\000\000\000\000\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\034\000\000\000\000\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\101\000\000\000\
\000\000\000\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\120\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\140\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000"

let yycheck = "\002\001\
\000\000\005\001\010\001\022\001\011\001\001\000\035\001\003\000\
\030\001\004\000\006\001\007\001\008\001\001\000\043\001\011\000\
\012\000\013\000\021\001\002\001\042\001\034\001\022\001\042\001\
\020\000\038\001\034\001\031\001\032\001\033\001\038\001\002\001\
\039\001\036\001\031\001\032\001\002\001\005\001\034\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\002\001\049\000\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\062\000\063\000\064\000\002\001\066\000\006\001\
\007\001\008\001\002\001\043\001\035\001\012\001\000\000\022\001\
\039\001\001\001\002\001\003\001\004\001\012\001\082\000\039\001\
\084\000\009\001\006\001\007\001\008\001\013\001\014\001\091\000\
\012\001\017\001\018\001\030\001\034\001\043\001\036\001\035\001\
\038\001\101\000\040\001\030\001\002\001\105\000\006\001\007\001\
\008\001\033\001\039\001\002\001\012\001\000\000\040\001\039\001\
\040\001\006\001\007\001\008\001\120\000\121\000\010\001\012\001\
\011\001\022\001\042\001\127\000\043\001\001\001\002\001\003\001\
\004\001\039\001\002\001\002\001\035\001\009\001\138\000\011\001\
\140\000\013\001\014\001\002\001\144\000\017\001\018\001\001\001\
\002\001\003\001\004\001\000\000\030\001\035\001\012\001\009\001\
\039\001\026\000\035\001\013\001\014\001\033\001\086\000\017\001\
\018\001\039\001\039\001\062\000\040\001\035\001\088\000\121\000\
\005\001\129\000\110\000\255\255\255\255\255\255\255\255\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\000\000\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\039\001\255\255\041\001\255\255\005\001\255\255\
\255\255\255\255\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\000\000\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\255\255\043\001\005\001\006\001\007\001\008\001\
\255\255\255\255\011\001\012\001\000\000\255\255\015\001\016\001\
\255\255\255\255\019\001\020\001\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\035\001\255\255\037\001\255\255\039\001\255\255\
\041\001\255\255\043\001\005\001\006\001\007\001\008\001\255\255\
\255\255\011\001\012\001\000\000\255\255\015\001\016\001\255\255\
\255\255\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\033\001\
\255\255\035\001\255\255\037\001\255\255\039\001\255\255\041\001\
\255\255\043\001\005\001\006\001\007\001\008\001\255\255\255\255\
\011\001\012\001\000\000\255\255\015\001\016\001\255\255\255\255\
\019\001\020\001\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\033\001\255\255\
\035\001\255\255\037\001\255\255\039\001\255\255\041\001\255\255\
\043\001\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\000\000\255\255\015\001\016\001\255\255\255\255\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\037\001\255\255\039\001\255\255\041\001\255\255\043\001\006\001\
\007\001\008\001\255\255\255\255\011\001\012\001\000\000\255\255\
\015\001\016\001\255\255\255\255\019\001\020\001\255\255\255\255\
\023\001\024\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\035\001\255\255\037\001\255\255\
\039\001\255\255\041\001\255\255\043\001\006\001\007\001\008\001\
\255\255\255\255\011\001\012\001\000\000\255\255\015\001\016\001\
\255\255\255\255\019\001\020\001\255\255\255\255\023\001\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\035\001\255\255\037\001\255\255\039\001\255\255\
\041\001\255\255\043\001\006\001\007\001\008\001\255\255\255\255\
\011\001\012\001\000\000\255\255\015\001\016\001\255\255\255\255\
\019\001\020\001\255\255\255\255\023\001\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\255\255\037\001\255\255\039\001\255\255\041\001\255\255\
\043\001\255\255\006\001\007\001\008\001\255\255\255\255\011\001\
\012\001\000\000\255\255\015\001\016\001\255\255\255\255\019\001\
\020\001\255\255\255\255\023\001\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\035\001\
\255\255\037\001\255\255\039\001\255\255\041\001\255\255\043\001\
\255\255\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\000\000\255\255\015\001\016\001\255\255\255\255\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\035\001\255\255\
\037\001\255\255\039\001\255\255\041\001\255\255\043\001\255\255\
\006\001\007\001\008\001\255\255\255\255\011\001\012\001\000\000\
\255\255\015\001\016\001\255\255\255\255\019\001\020\001\255\255\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\035\001\255\255\037\001\
\255\255\039\001\255\255\041\001\005\001\043\001\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\005\001\043\001\006\001\007\001\008\001\255\255\
\255\255\011\001\012\001\255\255\255\255\015\001\016\001\255\255\
\255\255\019\001\020\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\035\001\255\255\037\001\255\255\039\001\041\001\041\001\
\005\001\043\001\006\001\007\001\008\001\255\255\255\255\011\001\
\012\001\255\255\255\255\015\001\016\001\255\255\255\255\019\001\
\020\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\035\001\
\037\001\037\001\255\255\039\001\255\255\041\001\005\001\043\001\
\006\001\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\015\001\016\001\255\255\255\255\019\001\020\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\255\255\255\255\035\001\037\001\037\001\
\255\255\039\001\255\255\041\001\005\001\043\001\255\255\006\001\
\007\001\008\001\255\255\255\255\011\001\012\001\255\255\255\255\
\015\001\016\001\255\255\020\001\019\001\020\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\255\255\255\255\255\255\035\001\255\255\037\001\255\255\
\039\001\255\255\041\001\255\255\043\001\255\255\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\019\001\020\001\255\255\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\255\255\015\001\
\016\001\255\255\255\255\035\001\020\001\037\001\255\255\039\001\
\255\255\041\001\255\255\043\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\035\001\255\255\037\001\255\255\039\001\
\255\255\041\001\255\255\043\001\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\005\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\019\001\255\255\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\005\001\255\255\255\255\
\255\255\255\255\255\255\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  IF\000\
  ID\000\
  INT\000\
  STRING\000\
  PLUS\000\
  TYPE\000\
  VAR\000\
  FUNCTION\000\
  BREAK\000\
  OF\000\
  END\000\
  IN\000\
  NIL\000\
  LET\000\
  DO\000\
  TO\000\
  FOR\000\
  WHILE\000\
  ELSE\000\
  THEN\000\
  ARRAY\000\
  ASSIGN\000\
  OR\000\
  AND\000\
  GE\000\
  GT\000\
  LE\000\
  LT\000\
  NEQ\000\
  EQ\000\
  DIVIDE\000\
  TIMES\000\
  MINUS\000\
  DOT\000\
  RBRACE\000\
  LBRACE\000\
  RBRACK\000\
  LBRACK\000\
  RPAREN\000\
  LPAREN\000\
  SEMICOLON\000\
  COLON\000\
  COMMA\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    Obj.repr(
# 118 "parser.mly"
          ( _1 )
# 550 "parser.ml"
               : Analysis.Ab.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 122 "parser.mly"
    ( A.WhileExp {test = _2; body = _4; pos = _1} )
# 560 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 125 "parser.mly"
    ( A.IfExp {test = _2; then' = _4; else' = None; pos = _1} )
# 570 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 128 "parser.mly"
    ( A.IfExp {test = _2; then' = _4; else' = Some _6; pos = _1} )
# 582 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string * Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : A.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 131 "parser.mly"
    ( A.ForExp {var = S.symbol (fst _2); escape = ref false;
                lo = _4; hi = _6; body = _8; pos = _1} )
# 597 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : A.dec list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 135 "parser.mly"
    ( A.LetExp { decs = fix_decs _2; body = _4; pos = _1 } )
# 608 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : A.dec list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : (A.exp * A.pos) list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 138 "parser.mly"
    ( A.LetExp { decs = fix_decs _2;
                 body = A.SeqExp _4;
                 pos = _1 } )
# 621 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : A.dec list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 143 "parser.mly"
    ( A.LetExp { decs = fix_decs _2;
                 body = A.SeqExp [];
                 pos = _1 } )
# 633 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 147 "parser.mly"
         ( A.BreakExp _1 )
# 640 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.var) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 150 "parser.mly"
    ( A.AssignExp { var = _1; exp = _3; pos = _2 } )
# 649 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 153 "parser.mly"
                 ( A.IfExp { test = _1; then' = _3;
                             else' = Some (A.IntExp 0);
                             pos = _2 } )
# 660 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 156 "parser.mly"
                 ( A.IfExp { test = _1; then' = A.IntExp 1;
                             else' = Some _3; pos = _2 } )
# 670 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 159 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.EqOp; right = _3;
                            pos = _2 } )
# 680 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 161 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.NeqOp; right = _3;
                            pos = _2 } )
# 690 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 163 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.LtOp; right = _3;
                            pos = _2 } )
# 700 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 165 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.LeOp; right = _3;
                            pos = _2 } )
# 710 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 167 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.GtOp; right = _3;
                            pos = _2 } )
# 720 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 169 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.GeOp; right = _3;
                            pos = _2 } )
# 730 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 171 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.PlusOp; right = _3;
                            pos = _2 } )
# 740 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 173 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.MinusOp; right = _3;
                            pos = _2 } )
# 750 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 175 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.TimesOp; right = _3;
                            pos = _2 } )
# 760 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 177 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.DivideOp; right = _3;
                            pos = _2 } )
# 770 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 181 "parser.mly"
    ( A.OpExp {left =  A.IntExp 0; oper = A.MinusOp;
               right = _2; pos = _1 } )
# 779 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : A.exp list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 185 "parser.mly"
    ( A.CallExp {func = S.symbol (fst _1); args = _3;
                 pos = snd _1} )
# 790 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.var) in
    Obj.repr(
# 188 "parser.mly"
           ( A.VarExp _1 )
# 797 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int * Analysis.Ab.pos) in
    Obj.repr(
# 190 "parser.mly"
           ( A.IntExp (fst _1) )
# 804 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Analysis.Ab.pos) in
    Obj.repr(
# 191 "parser.mly"
           ( A.StringExp ( fst _1, snd _1 ) )
# 811 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (A.exp * A.pos) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 193 "parser.mly"
                          ( A.SeqExp _2 )
# 820 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 194 "parser.mly"
                          ( A.SeqExp [] )
# 828 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 195 "parser.mly"
                          ( _2 )
# 837 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : A.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 198 "parser.mly"
    ( A.ArrayExp {typ = S.symbol (fst _1); size = _3; init = _6;
                  pos = snd _1} )
# 850 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : (S.symbol * A.exp * A.pos) list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 202 "parser.mly"
    ( A.RecordExp {fields = _3; typ = S.symbol (fst _1);
                   pos = snd _1} )
# 861 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 205 "parser.mly"
           ( A.NilExp )
# 868 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "parser.mly"
    ( [] )
# 874 "parser.ml"
               : A.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.exp list) in
    Obj.repr(
# 210 "parser.mly"
            ( _1 )
# 881 "parser.ml"
               : A.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 213 "parser.mly"
       ( [ _1 ] )
# 888 "parser.ml"
               : A.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp list) in
    Obj.repr(
# 214 "parser.mly"
                      ( _1 :: _3 )
# 897 "parser.ml"
               : A.exp list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (A.exp * A.pos) list) in
    Obj.repr(
# 217 "parser.mly"
                      ( (_1, Parsing.rhs_start(1)) :: _3 )
# 906 "parser.ml"
               : (A.exp * A.pos) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 220 "parser.mly"
                        ( [ (_1, Parsing.rhs_start(1)) ] )
# 913 "parser.ml"
               : (A.exp * A.pos) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (A.exp * A.pos) list) in
    Obj.repr(
# 221 "parser.mly"
                        ( (_1, Parsing.rhs_start(1)) :: _3 )
# 922 "parser.ml"
               : (A.exp * A.pos) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 226 "parser.mly"
                 ( [] )
# 928 "parser.ml"
               : (S.symbol * A.exp * A.pos) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (S.symbol * A.exp * A.pos) list) in
    Obj.repr(
# 227 "parser.mly"
                 ( _1 )
# 935 "parser.ml"
               : (S.symbol * A.exp * A.pos) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (S.symbol * A.exp * A.pos)) in
    Obj.repr(
# 230 "parser.mly"
             ( [ _1 ] )
# 942 "parser.ml"
               : (S.symbol * A.exp * A.pos) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (S.symbol * A.exp * A.pos)) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (S.symbol * A.exp * A.pos) list) in
    Obj.repr(
# 231 "parser.mly"
                                ( _1 :: _3 )
# 951 "parser.ml"
               : (S.symbol * A.exp * A.pos) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 234 "parser.mly"
             ( S.symbol (fst _1), _3, snd _1 )
# 960 "parser.ml"
               : (S.symbol * A.exp * A.pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : (A.var -> A.var)) in
    Obj.repr(
# 239 "parser.mly"
    ( _2 (A.SimpleVar (S.symbol (fst _1), snd _1) ) )
# 968 "parser.ml"
               : A.var))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "parser.mly"
                       ( fun x -> x )
# 974 "parser.ml"
               : (A.var -> A.var)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (A.var -> A.var)) in
    Obj.repr(
# 244 "parser.mly"
    ( fun x -> _3 (A.FieldVar (x, S.symbol (fst _2), _1)) )
# 983 "parser.ml"
               : (A.var -> A.var)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : (A.var -> A.var)) in
    Obj.repr(
# 247 "parser.mly"
    ( fun x -> ( _4 (A.SubscriptVar (x,_2, _1)) ) )
# 993 "parser.ml"
               : (A.var -> A.var)))
; (fun __caml_parser_env ->
    Obj.repr(
# 251 "parser.mly"
            ( [] )
# 999 "parser.ml"
               : A.dec list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : A.dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : A.dec list) in
    Obj.repr(
# 252 "parser.mly"
            ( _1 :: _2 )
# 1007 "parser.ml"
               : A.dec list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 256 "parser.mly"
    ( A.VarDec { name = S.symbol (fst _2); escape = ref false;
                 typ = None; init = _4; pos = _1 } )
# 1018 "parser.ml"
               : A.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string * Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string * Analysis.Ab.pos) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 260 "parser.mly"
    ( A.VarDec { name = S.symbol (fst _2); escape = ref false;
                 typ = Some (S.symbol (fst _4), snd _4);
                 init = _6; pos = _1 } )
# 1032 "parser.ml"
               : A.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string * Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : A.field list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 266 "parser.mly"
    ( A.FunctionDec [ {A.fnname = S.symbol (fst _2); params = _4;
                       result = None; body = _7; fnpos = _1} ] )
# 1046 "parser.ml"
               : A.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string * Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : A.field list) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Analysis.Ab.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : string * Analysis.Ab.pos) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 270 "parser.mly"
    ( A.FunctionDec [ {A.fnname = S.symbol (fst _2); params = _4; 
                       result = Some (S.symbol (fst _7), snd _7);
                       body = _9; fnpos = _1} ] )
# 1063 "parser.ml"
               : A.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string * Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A.ty) in
    Obj.repr(
# 275 "parser.mly"
    ( A.TypeDec [ {A.tname = S.symbol (fst _2); ty = _4; 
                   tpos = _1} ] )
# 1074 "parser.ml"
               : A.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Analysis.Ab.pos) in
    Obj.repr(
# 279 "parser.mly"
     ( A.NameTy (S.symbol (fst _1), (snd _1) ) )
# 1081 "parser.ml"
               : A.ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A.field list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Analysis.Ab.pos) in
    Obj.repr(
# 280 "parser.mly"
                          ( A.RecordTy _2 )
# 1090 "parser.ml"
               : A.ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Analysis.Ab.pos) in
    Obj.repr(
# 281 "parser.mly"
              ( A.ArrayTy (S.symbol (fst _3), _1) )
# 1099 "parser.ml"
               : A.ty))
; (fun __caml_parser_env ->
    Obj.repr(
# 284 "parser.mly"
  ( [ ] )
# 1105 "parser.ml"
               : A.field list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.field list) in
    Obj.repr(
# 285 "parser.mly"
               ( _1 )
# 1112 "parser.ml"
               : A.field list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.field) in
    Obj.repr(
# 288 "parser.mly"
            ( [ _1 ] )
# 1119 "parser.ml"
               : A.field list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.field list) in
    Obj.repr(
# 289 "parser.mly"
                             ( _1 :: _3 )
# 1128 "parser.ml"
               : A.field list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Analysis.Ab.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Analysis.Ab.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Analysis.Ab.pos) in
    Obj.repr(
# 293 "parser.mly"
    ( { A.fname = S.symbol (fst _1); escape = ref false;
        typ = S.symbol (fst _3); fpos = (snd _1) } )
# 1138 "parser.ml"
               : A.field))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Analysis.Ab.exp)
;;
# 298 "parser.mly"
(* Trailer - OCaml declarations *)


# 1167 "parser.ml"
