type token =
  | INT of (int * Absyn.Absyn.pos)
  | STRING of (string * Absyn.Absyn.pos)
  | ID of (string * Absyn.Absyn.pos)
  | FOR of (Absyn.Absyn.pos)
  | WHILE of (Absyn.Absyn.pos)
  | BREAK of (Absyn.Absyn.pos)
  | LET of (Absyn.Absyn.pos)
  | IN of (Absyn.Absyn.pos)
  | NIL of (Absyn.Absyn.pos)
  | TO of (Absyn.Absyn.pos)
  | END of (Absyn.Absyn.pos)
  | FUNCTION of (Absyn.Absyn.pos)
  | VAR of (Absyn.Absyn.pos)
  | TYPE of (Absyn.Absyn.pos)
  | ARRAY of (Absyn.Absyn.pos)
  | IF of (Absyn.Absyn.pos)
  | THEN of (Absyn.Absyn.pos)
  | ELSE of (Absyn.Absyn.pos)
  | DO of (Absyn.Absyn.pos)
  | OF of (Absyn.Absyn.pos)
  | LPAREN of (Absyn.Absyn.pos)
  | RPAREN of (Absyn.Absyn.pos)
  | LBRACK of (Absyn.Absyn.pos)
  | RBRACK of (Absyn.Absyn.pos)
  | LBRACE of (Absyn.Absyn.pos)
  | RBRACE of (Absyn.Absyn.pos)
  | DOT of (Absyn.Absyn.pos)
  | COLON of (Absyn.Absyn.pos)
  | COMMA of (Absyn.Absyn.pos)
  | SEMICOLON of (Absyn.Absyn.pos)
  | PLUS of (Absyn.Absyn.pos)
  | MINUS of (Absyn.Absyn.pos)
  | TIMES of (Absyn.Absyn.pos)
  | DIVIDE of (Absyn.Absyn.pos)
  | EQ of (Absyn.Absyn.pos)
  | NEQ of (Absyn.Absyn.pos)
  | LT of (Absyn.Absyn.pos)
  | LE of (Absyn.Absyn.pos)
  | GT of (Absyn.Absyn.pos)
  | GE of (Absyn.Absyn.pos)
  | AND of (Absyn.Absyn.pos)
  | OR of (Absyn.Absyn.pos)
  | ASSIGN of (Absyn.Absyn.pos)
  | UMINUS of (Absyn.Absyn.pos)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* Header - OCaml declarations 
   Unfortunately, OCamlYacc places these declarations only in the
   generated `parser.ml` file and not in the generated `parser.mli`
   file.  Thus, we need fully qualified names in an declaration that
   appears in the `parser.mli` interface file.  
 *)

open Symbol
module A = Absyn.Absyn

# 62 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* STRING *);
  259 (* ID *);
  260 (* FOR *);
  261 (* WHILE *);
  262 (* BREAK *);
  263 (* LET *);
  264 (* IN *);
  265 (* NIL *);
  266 (* TO *);
  267 (* END *);
  268 (* FUNCTION *);
  269 (* VAR *);
  270 (* TYPE *);
  271 (* ARRAY *);
  272 (* IF *);
  273 (* THEN *);
  274 (* ELSE *);
  275 (* DO *);
  276 (* OF *);
  277 (* LPAREN *);
  278 (* RPAREN *);
  279 (* LBRACK *);
  280 (* RBRACK *);
  281 (* LBRACE *);
  282 (* RBRACE *);
  283 (* DOT *);
  284 (* COLON *);
  285 (* COMMA *);
  286 (* SEMICOLON *);
  287 (* PLUS *);
  288 (* MINUS *);
  289 (* TIMES *);
  290 (* DIVIDE *);
  291 (* EQ *);
  292 (* NEQ *);
  293 (* LT *);
  294 (* LE *);
  295 (* GT *);
  296 (* GE *);
  297 (* AND *);
  298 (* OR *);
  299 (* ASSIGN *);
  300 (* UMINUS *);
    0|]

let yylhs = "\255\255\
\006\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\014\000\015\000\008\000\009\000\009\000\009\000\010\000\010\000\
\016\000\016\000\016\000\002\000\017\000\017\000\018\000\018\000\
\011\000\011\000\011\000\019\000\019\000\007\000\013\000\020\000\
\020\000\004\000\004\000\021\000\021\000\005\000\003\000\003\000\
\003\000\012\000\012\000\012\000\022\000\022\000\022\000\022\000\
\024\000\024\000\024\000\024\000\023\000\023\000\023\000\023\000\
\025\000\026\000\028\000\028\000\027\000\027\000\029\000\029\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\006\000\004\000\001\000\
\003\000\004\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\004\000\004\000\008\000\001\000\005\000\005\000\003\000\002\000\
\006\000\004\000\001\000\000\000\003\000\005\000\001\000\001\000\
\003\000\004\000\004\000\003\000\000\000\002\000\000\000\003\000\
\000\000\001\000\003\000\001\000\003\000\003\000\002\000\000\000\
\003\000\007\000\009\000\004\000\006\000\004\000\001\000\003\000\
\003\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
\001\000\002\000\002\000\002\000\001\000\002\000\002\000\002\000\
\001\000\001\000\002\000\001\000\002\000\001\000\002\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\004\000\035\000\000\000\000\000\028\000\
\000\000\003\000\000\000\000\000\000\000\000\000\089\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\067\000\068\000\000\000\
\000\000\081\000\082\000\000\000\032\000\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000\085\000\000\000\070\000\072\000\071\000\075\000\076\000\
\074\000\079\000\078\000\080\000\000\000\031\000\000\000\055\000\
\054\000\000\000\000\000\014\000\015\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\000\000\000\000\000\007\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\062\000\063\000\030\000\
\029\000\000\000\057\000\000\000\051\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\065\000\064\000\053\000\038\000\000\000\048\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\132\000\119\000\126\000\025\000\026\000\015\000\016\000\017\000\
\098\000\018\000\095\000\027\000\039\000\000\000\000\000\019\000\
\121\000\138\000\133\000\080\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\000\000"

let yysindex = "\004\000\
\201\255\000\000\000\000\000\000\000\000\013\255\201\255\000\000\
\217\255\000\000\201\255\179\255\201\255\061\002\000\000\000\000\
\195\255\244\254\007\255\019\255\121\002\013\255\013\255\013\255\
\044\255\055\255\057\255\217\255\000\000\000\000\000\000\217\255\
\217\255\000\000\000\000\243\254\000\000\166\002\041\255\000\000\
\201\255\201\255\201\255\201\255\201\255\201\255\201\255\201\255\
\201\255\201\255\201\255\201\255\000\000\201\255\201\255\013\255\
\013\255\201\255\201\255\201\255\201\255\050\255\027\255\037\255\
\000\000\000\000\201\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\201\255\000\000\201\255\000\000\
\000\000\005\255\005\255\000\000\000\000\192\255\192\255\192\255\
\192\255\192\255\192\255\088\255\063\255\218\002\085\255\185\002\
\042\255\082\255\000\000\088\255\204\002\051\255\088\255\013\255\
\013\255\201\255\049\255\134\255\102\255\210\255\003\003\201\255\
\000\000\111\255\201\255\000\000\000\000\201\255\103\255\110\255\
\117\255\106\255\222\255\126\255\013\255\000\000\000\000\000\000\
\000\000\201\255\000\000\232\002\000\000\201\255\246\002\145\002\
\013\255\000\000\013\255\235\254\201\255\013\255\128\255\088\255\
\201\255\222\255\013\255\201\255\103\255\000\000\013\255\201\255\
\222\255\000\000\000\000\000\000\000\000\088\255\000\000\142\255\
\222\255\201\255\222\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\037\000\109\000\073\000\000\000\000\000\000\000\000\000\000\000\
\251\254\122\255\000\000\155\255\000\000\000\000\000\000\170\255\
\182\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\165\255\000\000\173\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\144\000\179\000\000\000\000\000\214\000\240\000\010\001\
\046\001\082\001\118\001\153\001\045\002\169\255\000\000\000\000\
\000\000\000\000\000\000\188\001\000\000\000\000\223\001\187\255\
\000\000\000\000\000\000\000\000\000\000\120\002\247\254\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\010\255\000\000\
\000\000\000\000\067\255\000\000\186\255\000\000\000\000\000\000\
\000\000\000\000\000\000\191\255\000\000\000\000\189\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\249\001\
\000\000\097\002\173\255\000\000\010\255\000\000\000\000\000\000\
\098\255\000\000\000\000\000\000\000\000\019\002\000\000\000\000\
\129\255\000\000\184\255"

let yygindex = "\000\000\
\255\255\082\000\000\000\000\000\000\000\000\000\000\000\011\000\
\074\000\000\000\000\000\000\000\160\000\000\000\000\000\000\000\
\107\000\085\000\090\000\125\000\000\000\124\000\127\000\161\000\
\000\000\000\000\211\000\213\000\000\000"

let yytablesize = 1069
let yytable = "\014\000\
\042\000\056\000\084\000\077\000\001\000\021\000\151\000\084\000\
\084\000\036\000\038\000\040\000\056\000\152\000\057\000\005\000\
\020\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\059\000\058\000\047\000\
\062\000\063\000\064\000\047\000\039\000\043\000\044\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\005\000\094\000\096\000\105\000\022\000\
\100\000\101\000\102\000\103\000\118\000\060\000\081\000\124\000\
\067\000\108\000\097\000\099\000\024\000\106\000\104\000\107\000\
\040\000\125\000\060\000\110\000\115\000\111\000\060\000\060\000\
\060\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\123\000\061\000\113\000\116\000\008\000\061\000\061\000\061\000\
\129\000\135\000\120\000\122\000\136\000\127\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\144\000\086\000\134\000\137\000\146\000\086\000\086\000\120\000\
\058\000\139\000\140\000\153\000\058\000\058\000\058\000\012\000\
\128\000\142\000\158\000\120\000\141\000\150\000\161\000\068\000\
\154\000\155\000\069\000\071\000\074\000\097\000\072\000\075\000\
\163\000\160\000\069\000\079\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\162\000\073\000\013\000\003\000\004\000\005\000\006\000\007\000\
\008\000\009\000\049\000\010\000\070\000\077\000\050\000\059\000\
\073\000\076\000\011\000\059\000\059\000\059\000\036\000\012\000\
\037\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\045\000\010\000\013\000\045\000\052\000\016\000\037\000\054\000\
\011\000\055\000\149\000\056\000\157\000\012\000\041\000\042\000\
\043\000\044\000\109\000\130\000\022\000\023\000\024\000\143\000\
\013\000\159\000\156\000\131\000\066\000\065\000\000\000\017\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\042\000\018\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\042\000\042\000\042\000\000\000\000\000\042\000\042\000\
\042\000\000\000\042\000\042\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\039\000\019\000\039\000\039\000\
\039\000\039\000\039\000\000\000\000\000\039\000\039\000\039\000\
\000\000\000\000\039\000\000\000\039\000\000\000\039\000\039\000\
\000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\040\000\020\000\040\000\040\000\040\000\040\000\040\000\000\000\
\000\000\040\000\040\000\040\000\000\000\000\000\040\000\000\000\
\040\000\000\000\040\000\040\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\008\000\021\000\008\000\008\000\
\008\000\008\000\008\000\000\000\000\000\008\000\008\000\008\000\
\000\000\000\000\008\000\000\000\008\000\000\000\008\000\000\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\012\000\
\022\000\012\000\012\000\012\000\012\000\012\000\000\000\000\000\
\012\000\012\000\012\000\000\000\000\000\012\000\000\000\012\000\
\000\000\012\000\000\000\000\000\012\000\012\000\012\000\012\000\
\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\013\000\009\000\013\000\013\000\013\000\013\000\
\013\000\000\000\000\000\013\000\013\000\013\000\000\000\000\000\
\013\000\000\000\013\000\000\000\013\000\000\000\000\000\013\000\
\013\000\013\000\013\000\000\000\000\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\016\000\026\000\016\000\
\016\000\016\000\016\000\016\000\000\000\000\000\016\000\016\000\
\016\000\000\000\000\000\016\000\000\000\016\000\000\000\016\000\
\000\000\000\000\016\000\016\000\000\000\000\000\000\000\017\000\
\024\000\017\000\017\000\017\000\017\000\017\000\016\000\016\000\
\017\000\017\000\017\000\000\000\000\000\017\000\000\000\017\000\
\000\000\017\000\000\000\000\000\017\000\017\000\000\000\000\000\
\000\000\018\000\027\000\018\000\018\000\018\000\018\000\018\000\
\017\000\017\000\018\000\018\000\018\000\000\000\000\000\018\000\
\000\000\018\000\000\000\018\000\000\000\000\000\018\000\018\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\018\000\018\000\000\000\019\000\000\000\019\000\
\019\000\019\000\019\000\019\000\053\000\000\000\019\000\019\000\
\019\000\000\000\000\000\019\000\000\000\019\000\000\000\019\000\
\000\000\000\000\019\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\019\000\
\000\000\020\000\000\000\020\000\020\000\020\000\020\000\020\000\
\006\000\000\000\020\000\020\000\020\000\000\000\000\000\020\000\
\000\000\020\000\000\000\020\000\000\000\000\000\020\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\000\000\020\000\020\000\000\000\021\000\000\000\021\000\
\021\000\021\000\021\000\021\000\000\000\000\000\021\000\021\000\
\021\000\000\000\000\000\021\000\000\000\021\000\000\000\021\000\
\000\000\000\000\021\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\021\000\
\022\000\000\000\022\000\022\000\022\000\022\000\022\000\000\000\
\000\000\022\000\022\000\022\000\000\000\000\000\022\000\000\000\
\022\000\000\000\022\000\000\000\000\000\022\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\022\000\009\000\000\000\009\000\009\000\009\000\
\009\000\009\000\000\000\000\000\009\000\009\000\009\000\000\000\
\000\000\009\000\000\000\009\000\000\000\009\000\000\000\000\000\
\009\000\009\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\009\000\026\000\000\000\
\026\000\026\000\026\000\026\000\026\000\000\000\000\000\026\000\
\026\000\026\000\000\000\000\000\026\000\000\000\026\000\000\000\
\026\000\000\000\000\000\026\000\026\000\000\000\000\000\000\000\
\024\000\000\000\024\000\024\000\024\000\024\000\024\000\026\000\
\026\000\024\000\024\000\024\000\000\000\000\000\024\000\000\000\
\024\000\000\000\024\000\000\000\000\000\024\000\024\000\000\000\
\000\000\000\000\027\000\000\000\027\000\027\000\027\000\027\000\
\027\000\024\000\024\000\027\000\027\000\027\000\000\000\000\000\
\027\000\000\000\027\000\000\000\027\000\000\000\000\000\027\000\
\027\000\000\000\000\000\000\000\023\000\000\000\023\000\023\000\
\023\000\023\000\023\000\027\000\027\000\023\000\023\000\023\000\
\000\000\000\000\023\000\000\000\023\000\000\000\023\000\000\000\
\000\000\023\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\023\000\000\000\
\000\000\000\000\000\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\000\000\
\006\000\000\000\006\000\006\000\006\000\006\000\006\000\000\000\
\000\000\006\000\006\000\006\000\000\000\000\000\006\000\000\000\
\006\000\000\000\006\000\000\000\000\000\006\000\006\000\025\000\
\000\000\025\000\025\000\025\000\025\000\025\000\000\000\000\000\
\025\000\000\000\025\000\061\000\000\000\025\000\000\000\025\000\
\000\000\025\000\000\000\000\000\025\000\025\000\000\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\148\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\078\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\114\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\117\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\112\000\000\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\145\000\000\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\147\000\000\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\079\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000"

let yycheck = "\001\000\
\000\000\011\001\008\001\017\001\001\000\007\000\028\001\013\001\
\014\001\011\000\012\000\013\000\022\001\035\001\027\001\003\001\
\006\000\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\023\001\043\001\022\001\
\022\000\023\000\024\000\026\001\000\000\033\001\034\001\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\003\001\054\000\055\000\028\001\012\001\
\058\000\059\000\060\000\061\000\010\001\043\001\022\001\015\001\
\008\001\067\000\056\000\057\000\014\001\043\001\021\001\035\001\
\000\000\025\001\008\001\077\000\035\001\079\000\012\001\013\001\
\014\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\106\000\008\001\022\001\026\001\000\000\012\001\013\001\014\001\
\011\001\115\000\104\000\105\000\118\000\107\000\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\130\000\008\001\020\001\029\001\134\000\012\001\013\001\125\000\
\008\001\028\001\022\001\141\000\012\001\013\001\014\001\000\000\
\011\001\020\001\148\000\137\000\043\001\139\000\152\000\028\000\
\142\000\026\001\028\000\032\000\033\000\147\000\032\000\033\000\
\162\000\151\000\008\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\035\001\008\001\000\000\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\022\001\009\001\028\000\008\001\022\001\008\001\
\032\000\033\000\016\001\012\001\013\001\014\001\026\001\021\001\
\022\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\022\001\009\001\032\001\026\001\022\001\000\000\026\001\021\001\
\016\001\023\001\137\000\025\001\147\000\021\001\031\001\032\001\
\033\001\034\001\067\000\018\001\012\001\013\001\014\001\125\000\
\032\001\149\000\145\000\111\000\026\000\025\000\255\255\000\000\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\008\001\000\000\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\255\255\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\008\001\000\000\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\008\001\000\000\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\255\255\255\255\022\001\255\255\
\024\001\255\255\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\008\001\000\000\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\026\001\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\008\001\
\000\000\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\018\001\019\001\255\255\255\255\022\001\255\255\024\001\
\255\255\026\001\255\255\255\255\029\001\030\001\031\001\032\001\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\008\001\000\000\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\018\001\019\001\255\255\255\255\
\022\001\255\255\024\001\255\255\026\001\255\255\255\255\029\001\
\030\001\031\001\032\001\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\008\001\000\000\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\018\001\
\019\001\255\255\255\255\022\001\255\255\024\001\255\255\026\001\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\008\001\
\000\000\010\001\011\001\012\001\013\001\014\001\041\001\042\001\
\017\001\018\001\019\001\255\255\255\255\022\001\255\255\024\001\
\255\255\026\001\255\255\255\255\029\001\030\001\255\255\255\255\
\255\255\008\001\000\000\010\001\011\001\012\001\013\001\014\001\
\041\001\042\001\017\001\018\001\019\001\255\255\255\255\022\001\
\255\255\024\001\255\255\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\041\001\042\001\255\255\008\001\255\255\010\001\
\011\001\012\001\013\001\014\001\000\000\255\255\017\001\018\001\
\019\001\255\255\255\255\022\001\255\255\024\001\255\255\026\001\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\042\001\
\255\255\008\001\255\255\010\001\011\001\012\001\013\001\014\001\
\000\000\255\255\017\001\018\001\019\001\255\255\255\255\022\001\
\255\255\024\001\255\255\026\001\255\255\255\255\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\041\001\042\001\255\255\008\001\255\255\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\018\001\
\019\001\255\255\255\255\022\001\255\255\024\001\255\255\026\001\
\255\255\255\255\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\041\001\042\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\255\255\255\255\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\041\001\042\001\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\017\001\018\001\019\001\255\255\
\255\255\022\001\255\255\024\001\255\255\026\001\255\255\255\255\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\041\001\042\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\018\001\019\001\255\255\255\255\022\001\255\255\024\001\255\255\
\026\001\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\041\001\
\042\001\017\001\018\001\019\001\255\255\255\255\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\008\001\255\255\010\001\011\001\012\001\013\001\
\014\001\041\001\042\001\017\001\018\001\019\001\255\255\255\255\
\022\001\255\255\024\001\255\255\026\001\255\255\255\255\029\001\
\030\001\255\255\255\255\255\255\008\001\255\255\010\001\011\001\
\012\001\013\001\014\001\041\001\042\001\017\001\018\001\019\001\
\255\255\255\255\022\001\255\255\024\001\255\255\026\001\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\255\255\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\018\001\019\001\255\255\255\255\022\001\255\255\
\024\001\255\255\026\001\255\255\255\255\029\001\030\001\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\019\001\019\001\255\255\022\001\255\255\024\001\
\255\255\026\001\255\255\255\255\029\001\030\001\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\019\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  STRING\000\
  ID\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  LET\000\
  IN\000\
  NIL\000\
  TO\000\
  END\000\
  FUNCTION\000\
  VAR\000\
  TYPE\000\
  ARRAY\000\
  IF\000\
  THEN\000\
  ELSE\000\
  DO\000\
  OF\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  LBRACE\000\
  RBRACE\000\
  DOT\000\
  COLON\000\
  COMMA\000\
  SEMICOLON\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  AND\000\
  OR\000\
  ASSIGN\000\
  UMINUS\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    Obj.repr(
# 52 "parser.mly"
          ( _1 )
# 554 "parser.ml"
               : Absyn.Absyn.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int * Absyn.Absyn.pos) in
    Obj.repr(
# 56 "parser.mly"
      ( A.IntExp (fst _1) )
# 561 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 57 "parser.mly"
      ( A.NilExp )
# 568 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Absyn.Absyn.pos) in
    Obj.repr(
# 58 "parser.mly"
         (A.StringExp (fst _1, snd _1))
# 575 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sequence) in
    Obj.repr(
# 60 "parser.mly"
           (_1)
# 582 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : A.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 61 "parser.mly"
                              ( A.ArrayExp{typ = _1; size = _3; init = _6; pos = Parsing.rhs_start 1})
# 594 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'field_values) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 62 "parser.mly"
                                ( A.RecordExp {fields = _3; typ = _1; pos = Parsing.rhs_start 1})
# 604 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue) in
    Obj.repr(
# 63 "parser.mly"
         (A.VarExp(_1))
# 611 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 64 "parser.mly"
                    (A.AssignExp{var = _1;exp = _3;pos = Parsing.rhs_start 1})
# 620 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'funcargs) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 65 "parser.mly"
                            ( A.CallExp {func = _1; args = _3; pos = Parsing.rhs_start 1} )
# 630 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 66 "parser.mly"
                         ( A.OpExp {left = A.IntExp 0; oper = A.MinusOp; right = _2;
                 pos = _1 } )
# 639 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 68 "parser.mly"
               ( A.OpExp {left = _1; oper = A.PlusOp; right = _3;
                 pos = _2 } )
# 649 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 70 "parser.mly"
                ( A.OpExp {left = _1; oper = A.MinusOp; right = _3;
                 pos = _2 } )
# 659 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 72 "parser.mly"
                ( A.OpExp {left = _1; oper = A.TimesOp; right = _3;
                 pos = _2 } )
# 669 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 74 "parser.mly"
                 ( A.OpExp {left = _1; oper = A.DivideOp; right = _3;
                 pos = _2 } )
# 679 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 76 "parser.mly"
             ( A.OpExp {left = _1; oper = A.EqOp; right = _3;
                 pos = _2 } )
# 689 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 78 "parser.mly"
              ( A.OpExp {left = _1; oper = A.NeqOp; right = _3;
                 pos = _2 } )
# 699 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 80 "parser.mly"
             ( A.OpExp {left = _1; oper = A.LtOp; right = _3;
                 pos = _2 } )
# 709 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 82 "parser.mly"
             ( A.OpExp {left = _1; oper = A.LeOp; right = _3;
                 pos = _2 } )
# 719 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 84 "parser.mly"
             ( A.OpExp {left = _1; oper = A.GtOp; right = _3;
                 pos = _2 } )
# 729 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 86 "parser.mly"
             ( A.OpExp {left = _1; oper = A.GeOp; right = _3;
                 pos = _2 } )
# 739 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 88 "parser.mly"
              ( A.IfExp{test=_1; then' = _3; else' =  Some (A.IntExp 0); pos = Parsing.rhs_start 1} )
# 748 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 89 "parser.mly"
             ( A.IfExp{test=_1; then' = A.IntExp 1; else' = Some(_3); pos = Parsing.rhs_start 1} )
# 757 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 90 "parser.mly"
                           ( A.IfExp {test = _2; then' = _4; else' = Some (_6); pos = _1} )
# 769 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 91 "parser.mly"
                  ( A.IfExp {test = _2; then' = _4; else' = None; pos = _1} )
# 779 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 92 "parser.mly"
                   ( A.WhileExp { test = _2; body = _4; pos = _1 } )
# 789 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : A.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Absyn.Absyn.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 93 "parser.mly"
                                  ( A.ForExp{ var = _2; escape = ref true; lo = _4; hi = _6; body = _8;pos = _1 } )
# 803 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 94 "parser.mly"
        ( A.BreakExp (_1))
# 810 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'decs) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'sequenceExp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 95 "parser.mly"
                              ( A.LetExp{decs=_2; body = A.SeqExp(_4); pos = _1})
# 821 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'decs) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 96 "parser.mly"
                      ( A.LetExp{decs=_2; body = _4; pos = _1})
# 832 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 97 "parser.mly"
                    (_2)
# 841 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 98 "parser.mly"
                (A.SeqExp([]))
# 849 "parser.ml"
               : A.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : A.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 104 "parser.mly"
                              ( A.ArrayExp{typ = _1; size = _3; init = _6; pos = Parsing.rhs_start 1})
# 861 "parser.ml"
               : 'arrexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lvalue) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 107 "parser.mly"
                           (A.SubscriptVar(_1, _3, Parsing.rhs_start 1) )
# 871 "parser.ml"
               : 'subscrivar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Absyn.Absyn.pos) in
    Obj.repr(
# 111 "parser.mly"
     (Symbol.symbol (fst _1))
# 878 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
            ([])
# 884 "parser.ml"
               : 'field_values))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 116 "parser.mly"
            ( (_1, _3, Parsing.rhs_start 1)::[] )
# 893 "parser.ml"
               : 'field_values))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'field_values) in
    Obj.repr(
# 117 "parser.mly"
                               ((_1, _3, Parsing.rhs_start 1)::_5)
# 904 "parser.ml"
               : 'field_values))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 128 "parser.mly"
     (A.SimpleVar(_1, Parsing.rhs_start 1))
# 911 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue_not_id) in
    Obj.repr(
# 129 "parser.mly"
                (_1)
# 918 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 132 "parser.mly"
                ( A.FieldVar(_1, _3, Parsing.rhs_start 1) )
# 927 "parser.ml"
               : 'lvalue_not_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 133 "parser.mly"
                       (A.SubscriptVar(A.SimpleVar(_1, Parsing.rhs_start 1), _3, Parsing.rhs_start 1) )
# 937 "parser.ml"
               : 'lvalue_not_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lvalue_not_id) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 134 "parser.mly"
                                  (A.SubscriptVar(_1, _3, Parsing.rhs_start 1) )
# 947 "parser.ml"
               : 'lvalue_not_id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 138 "parser.mly"
              ( {fname = _1; escape = ref true; typ = _3; fpos = Parsing.rhs_start 1} )
# 956 "parser.ml"
               : A.field))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
  ([])
# 962 "parser.ml"
               : 'fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : A.field) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fields_rest) in
    Obj.repr(
# 143 "parser.mly"
                    ( _1::_2 )
# 970 "parser.ml"
               : 'fields))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
  ([])
# 976 "parser.ml"
               : 'fields_rest))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A.field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fields_rest) in
    Obj.repr(
# 148 "parser.mly"
                          ( _2::_3 )
# 985 "parser.ml"
               : 'fields_rest))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
  ( [] )
# 991 "parser.ml"
               : 'funcargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 154 "parser.mly"
      ( _1::[] )
# 998 "parser.ml"
               : 'funcargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'funcargs_rest) in
    Obj.repr(
# 155 "parser.mly"
                          ( _1::_3 )
# 1007 "parser.ml"
               : 'funcargs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 159 "parser.mly"
      ( _1::[] )
# 1014 "parser.ml"
               : 'funcargs_rest))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'funcargs_rest) in
    Obj.repr(
# 160 "parser.mly"
                          ( _1::_3 )
# 1023 "parser.ml"
               : 'funcargs_rest))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'sequenceExp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 164 "parser.mly"
                            (A.SeqExp(_2))
# 1032 "parser.ml"
               : 'sequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'seqtail) in
    Obj.repr(
# 167 "parser.mly"
              ((_1, Parsing.rhs_start 1)::_2)
# 1040 "parser.ml"
               : 'sequenceExp))
; (fun __caml_parser_env ->
    Obj.repr(
# 170 "parser.mly"
  ([])
# 1046 "parser.ml"
               : 'seqtail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seqtail) in
    Obj.repr(
# 171 "parser.mly"
                        ((_2, Parsing.rhs_start 2)::_3)
# 1055 "parser.ml"
               : 'seqtail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'fields) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 175 "parser.mly"
                                          ({ fnname = _2; params = _4; result = None; body = _7; fnpos = _1 })
# 1068 "parser.ml"
               : A.fundec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'fields) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Absyn.Absyn.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Absyn.Absyn.pos) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 176 "parser.mly"
                                                   ({ fnname = _2; params = _4; result = Some(_7, Parsing.rhs_start 7); body = _9; fnpos = _1 })
# 1083 "parser.ml"
               : A.fundec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 180 "parser.mly"
                    ( A.VarDec{name = _2; escape = ref true; typ = None; init = _4; pos = _1} )
# 1093 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 181 "parser.mly"
                             ( A.VarDec{name = _2; escape = ref true; typ = Some(_4,Parsing.rhs_start 4); init = _6; pos = _1} )
# 1105 "parser.ml"
               : 'vardec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : A.ty) in
    Obj.repr(
# 185 "parser.mly"
                ({ tname = _2; ty = _4; tpos = _1} )
# 1115 "parser.ml"
               : A.typedec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 189 "parser.mly"
     ( A.NameTy(_1, Parsing.rhs_start 1) )
# 1122 "parser.ml"
               : A.ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Absyn.Absyn.pos) in
    Obj.repr(
# 190 "parser.mly"
                       ( A.RecordTy(_2))
# 1131 "parser.ml"
               : A.ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 191 "parser.mly"
              (A.ArrayTy(_3, Parsing.rhs_start 1))
# 1140 "parser.ml"
               : A.ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardecslist) in
    Obj.repr(
# 195 "parser.mly"
               (_1)
# 1147 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fundecslist) in
    Obj.repr(
# 196 "parser.mly"
              (_1)
# 1154 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedecslist) in
    Obj.repr(
# 197 "parser.mly"
               (_1)
# 1161 "parser.ml"
               : 'decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardec) in
    Obj.repr(
# 202 "parser.mly"
         (_1::[])
# 1168 "parser.ml"
               : 'vardecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vardec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vardecslist) in
    Obj.repr(
# 203 "parser.mly"
                     (_1::_2)
# 1176 "parser.ml"
               : 'vardecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vardec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedecslist) in
    Obj.repr(
# 204 "parser.mly"
                      (_1::_2)
# 1184 "parser.ml"
               : 'vardecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vardec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fundecslist) in
    Obj.repr(
# 205 "parser.mly"
                     (_1::_2)
# 1192 "parser.ml"
               : 'vardecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mutualtypedecs) in
    Obj.repr(
# 209 "parser.mly"
                 (_1::[])
# 1199 "parser.ml"
               : 'typedecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mutualtypedecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedecslist) in
    Obj.repr(
# 210 "parser.mly"
                              ( _1::_2 )
# 1207 "parser.ml"
               : 'typedecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mutualtypedecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vardecslist) in
    Obj.repr(
# 211 "parser.mly"
                             ( _1::_2 )
# 1215 "parser.ml"
               : 'typedecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mutualtypedecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fundecslist) in
    Obj.repr(
# 212 "parser.mly"
                             ( _1::_2 )
# 1223 "parser.ml"
               : 'typedecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mutualfundecs) in
    Obj.repr(
# 216 "parser.mly"
                (_1::[])
# 1230 "parser.ml"
               : 'fundecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mutualfundecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fundecslist) in
    Obj.repr(
# 217 "parser.mly"
                            ( _1::_2 )
# 1238 "parser.ml"
               : 'fundecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mutualfundecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vardecslist) in
    Obj.repr(
# 218 "parser.mly"
                            ( _1::_2 )
# 1246 "parser.ml"
               : 'fundecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mutualfundecs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedecslist) in
    Obj.repr(
# 219 "parser.mly"
                             ( _1::_2 )
# 1254 "parser.ml"
               : 'fundecslist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typedecs) in
    Obj.repr(
# 222 "parser.mly"
           ( A.TypeDec(_1))
# 1261 "parser.ml"
               : 'mutualtypedecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fundecs) in
    Obj.repr(
# 225 "parser.mly"
          ( A.FunctionDec(_1) )
# 1268 "parser.ml"
               : 'mutualfundecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : A.fundec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fundecs) in
    Obj.repr(
# 228 "parser.mly"
                 (_1::_2)
# 1276 "parser.ml"
               : 'fundecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.fundec) in
    Obj.repr(
# 229 "parser.mly"
         (_1::[])
# 1283 "parser.ml"
               : 'fundecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : A.typedec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typedecs) in
    Obj.repr(
# 232 "parser.mly"
                   (_1::_2)
# 1291 "parser.ml"
               : 'typedecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : A.typedec) in
    Obj.repr(
# 233 "parser.mly"
          (_1::[])
# 1298 "parser.ml"
               : 'typedecs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : A.exp) in
    Obj.repr(
# 236 "parser.mly"
                ((_2, Parsing.rhs_start 1)::[])
# 1306 "parser.ml"
               : 'expseq_rest))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Absyn.Absyn.pos) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : A.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expseq_rest) in
    Obj.repr(
# 237 "parser.mly"
                            ((_2, Parsing.rhs_start 1)::_3)
# 1315 "parser.ml"
               : 'expseq_rest))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Absyn.Absyn.exp)
;;
# 241 "parser.mly"
(* Trailer - OCaml declarations *)
# 1342 "parser.ml"
